name: Scoreboard Testing

on:
  push:
    branches: [ ]
  pull_request:
    branches: [ "master" ]

jobs:
  docker_build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true

      matrix:
        target_os: [linux, macos]
        include:
          - target_os: linux
            docker_target: standard_build
            os: ubuntu-latest
          - target_os: macos
            docker_target: macos_build
            os: ubuntu-latest

    outputs:
      docker-tag: ${{ steps.strings.outputs.docker-tag }}

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "docker-tag=ghcr.io/akbarthegreat/cszb_scoreboard_${{ matrix.docker_target }}_${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}:latest" >> $GITHUB_OUTPUT
        echo "cache-branch=ghcr.io/akbarthegreat/cszb_scoreboard_cache_${{ matrix.docker_target }}_${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

    - name: Login to Docker
      env:
        GITHUB_USER: ${{ github.actor }}
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: $GITHUB_USER
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and Push Docker Image
      env:
        REGISTRY: ghcr.io
        OWNER: AkbarTheGreat
        IMAGE_NAME: ${{ github.repository }}
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: ${{ matrix.docker_target }}
        tags: ${{ steps.strings.outputs.docker-tag }}
        push: true
        cache-from: type=registry,ref=${{ steps.strings.outputs.cache-branch }}
        cache-to: type=registry,ref=${{ steps.strings.outputs.cache-branch }}

  build:
    runs-on: ${{ matrix.os }}
    needs: [docker_build]
    container:
      image:  ${{ needs.docker_build.outputs.docker-tag }}

    strategy:
      fail-fast: true

      matrix:
        target_os: [linux, macos]
        build_type: [Release, Debug]
        include:
          - target_os: linux
            docker_target: standard_build
            os: ubuntu-latest
            test: true
            build_target: all
          - target_os: macos
            docker_target: macos_build
            os: ubuntu-latest
            test: false
            cmake_args:  >
                -DCMAKE_OSX_DEPLOYMENT_TARGET=10.12
                -DCMAKE_TOOLCHAIN_FILE=/opt/osxcross/toolchain.cmake
                -DOPENSSL_ROOT_DIR=/opt/osxcross/macports/pkgs/opt/local/libexec/openssl3
            env:
              - LD_LIBRARY_PATH='/opt/osxcross/lib'
            build_target: cszb-scoreboard
    steps:
    - uses: actions/checkout@v4

    - name: Configure Cmake
      run: >
        cmake -B out/${{ matrix.build_type }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DSKIP_LINT=true
        -DINTEGRATION_TEST=false
        ${{ matrix.cmake_args }}

    - name: Build
      run: >
        cmake --build out/${{ matrix.build_type }} --parallel 4 --config ${{ matrix.build_type }} --target ${{ matrix.build_target }}

  test:
    runs-on: ${{ matrix.os }}
    needs: [docker_build]
    container:
      image:  "ghcr.io/akbarthegreat/cszb_scoreboard_${{ matrix.docker_target }}:latest"

    strategy:
      fail-fast: true

      matrix:
        target_os: [linux]
        build_type: [Release, Debug]
        include:
          - target_os: linux
            docker_target: standard_build
            os: ubuntu-latest
            test: true

    steps:
    - uses: actions/checkout@v4

    - name: Configure Cmake
      run: >
        cmake -B out/${{ matrix.build_type }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DSKIP_LINT=true
        -DINTEGRATION_TEST=false

    - name: Build
      run: >
        cmake --build out/${{ matrix.build_type }} --parallel 4 --config ${{ matrix.build_type }}

    - name: Test
      if: ${{ matrix.test }}
      run: >
        etc/github_actions/run_automated_tests.sh ${{ matrix.build_type }}

    - name: Archive test results
      uses: actions/upload-artifact@v4
      if: ${{ matrix.test }}
      with:
        name: test-results-${{ matrix.build_type }}
        path: |
            out/${{ matrix.build_type }}/gtest/**/*.xml
            out/${{ matrix.build_type }}/Testing/**/*.xml

    - name: Test Report
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: ${{ matrix.test }}
      with:
        files: out/${{ matrix.build_type }}/gtest/**/*.xml
