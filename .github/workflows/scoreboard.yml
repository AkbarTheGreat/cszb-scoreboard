name: Scoreboard Testing

on:
  push:
    branches: [ ]
  pull_request:
    branches: [ "master" ]

env:
  vcpkg_commit: 4044645043df0cb62e35ac91042221731153e1bb
  wxwidget_commit: 44b99195bc4395944bab8071c6d7adcbdcdf8773

jobs:
  docker_build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true

      matrix:
        target_os: [Linux, MacOS]
        include:
          - target_os: Linux
            docker_target: standard_build
            os: ubuntu-latest
          - target_os: MacOS
            docker_target: macos_build
            os: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "cache-branch=ghcr.io/akbarthegreat/cszb_scoreboard_cache_${{ matrix.docker_target }}_${{ github.head_ref || github.ref_name }}" >> $GITHUB_OUTPUT

    - name: Login to Docker
      env:
        GITHUB_USER: ${{ github.actor }}
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: $GITHUB_USER
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and Push Docker Image
      env:
        REGISTRY: ghcr.io
        OWNER: AkbarTheGreat
        IMAGE_NAME: ${{ github.repository }}
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: ${{ matrix.docker_target }}
        tags: ghcr.io/akbarthegreat/cszb_scoreboard_${{ matrix.docker_target }}_${{ github.head_ref || github.ref_name }}:latest
        push: true
        cache-from: type=registry,ref=${{ steps.strings.outputs.cache-branch }}
        cache-to: type=registry,ref=${{ steps.strings.outputs.cache-branch }}

  wxwidgets_build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true

      matrix:
        target_os: [Win64]
        build_type: [Release, Debug]
        include:
          - target_os: Win64
            os: windows-latest

    steps:
    - name: Cache wxWidgets install
      id: cache-wx-install
      uses: actions/cache@v4
      env:
        cache-name: cache-wx-install
      with:
        path: ./wx/x64-${{ matrix.build_type }}
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.build_type }}-${{ env.wxwidget_commit }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.build_type }}-
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Checkout wxWidgets
      if: ${{ steps.cache-wx-install.outputs.cache-hit != 'true' }}
      run: |
        git clone https://github.com/wxWidgets/wxWidgets.git  wxwidgets
        cd wxwidgets
        git fetch --all --tags
        git checkout ${{ env.wxwidget_commit }}
        git submodule update --init --recursive

    - name: Build wxWidgets
      if: ${{ steps.cache-wx-install.outputs.cache-hit != 'true' }}
      uses: threeal/cmake-action@main
      with:
        source-dir: ${{ github.workspace }}/wxwidgets
        build-dir: ${{ github.workspace }}/wxwidgets/out/${{ matrix.target_os }}/${{ matrix.build_type }}
        build-args: --config ${{ matrix.build_type }}
        options: 
                 wxBUILD_SHARED=OFF
                 wxBUILD_SAMPLES=OFF
                 wxBUILD_MONOLITHIC=OFF
                 wxBUILD_USE_STATIC_RUNTIME=ON
                 wxUSE_XLOCALE=OFF
                 wxUSE_WEBVIEW_WEBKIT=ON
                 wxUSE_WEBVIEW_EDGE=ON
                 wxUSE_WEBVIEW_EDGE_STATIC=ON
                 CMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Install wxWidgets
      if: ${{ steps.cache-wx-install.outputs.cache-hit != 'true' }}
      working-directory: ./wxwidgets
      run: >
        cmake
        --install out/${{ matrix.target_os }}/${{ matrix.build_type }}
        --config ${{ matrix.build_type }}
        --prefix ${{ github.workspace }}/wx/x64-${{ matrix.build_type }}

  build:
    runs-on: ${{ matrix.os }}
    needs: [docker_build, wxwidgets_build]
    container:
      image: ${{ matrix.image }}

    strategy:
      fail-fast: true

      matrix:
        target_os: [Linux, MacOS, Win64]
        build_type: [Release, Debug]
        include:
          - target_os: Linux
            os: ubuntu-latest
            test: true
            image: ghcr.io/akbarthegreat/cszb_scoreboard_standard_build_${{ github.head_ref || github.ref_name }}:latest
          - target_os: MacOS
            os: ubuntu-latest
            test: false
            env:
              - LD_LIBRARY_PATH='/opt/osxcross/lib'
            build_args: --target cszb-scoreboard
            image: ghcr.io/akbarthegreat/cszb_scoreboard_macos_build_${{ github.head_ref || github.ref_name }}:latest
          - target_os: Win64
            os: windows-latest
            test: true
    steps:
    - uses: actions/checkout@v4

    - name: Setup vckpkg
      if: ${{ matrix.target_os == 'Win64' }}
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.vcpkg_commit }}'

    - name: Cache wxWidgets install
      if: ${{ matrix.target_os == 'Win64' }}
      id: cache-wx-install
      uses: actions/cache@v4
      env:
        cache-name: cache-wx-install
      with:
        path: ./wx/x64-${{ matrix.build_type }}
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.build_type }}-${{ env.wxwidget_commit }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.build_type }}-
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Build Scoreboard
      uses: threeal/cmake-action@main
      env:
        VCPKG_ROOT: ${{ github.workspace }}/vcpkg # Only used in win-64, ignored in other platforms.
        WXWIDGETS_ROOT: ${{ github.workspace }}/wx # Only used in win-64, ignored in other platforms.
      with:
        source-dir: ${{ github.workspace }}
        build-dir: ${{ github.workspace }}/out/${{ matrix.target_os }}/${{ matrix.build_type }}
        args: --preset ${{ matrix.target_os }}-${{ matrix.build_type }}
        build-args: --preset ${{ matrix.target_os }}-${{ matrix.build_type }}

  test:
    runs-on: ${{ matrix.os }}
    needs: [docker_build]
    container:
      image: ${{ matrix.image }}

    strategy:
      fail-fast: true

      matrix:
        target_os: [Linux, Win64]
        build_type: [Release, Debug]
        include:
          - target_os: Linux
            os: ubuntu-latest
            test: true
            image: ghcr.io/akbarthegreat/cszb_scoreboard_standard_build_${{ github.head_ref || github.ref_name }}:latest
          - target_os: Win64
            os: windows-latest
            test: true

    steps:
    - uses: actions/checkout@v4

    - name: Setup vckpkg
      if: ${{ matrix.target_os == 'Win64' }}
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.vcpkg_commit }}'

    - name: Cache wxWidgets install
      if: ${{ matrix.target_os == 'Win64' }}
      id: cache-wx-install
      uses: actions/cache@v4
      env:
        cache-name: cache-wx-install
      with:
        path: ./wx/x64-${{ matrix.build_type }}
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.build_type }}-${{ env.wxwidget_commit }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.build_type }}-
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Build Scoreboard
      uses: threeal/cmake-action@main
      env:
        VCPKG_ROOT: ${{ github.workspace }}/vcpkg # Only used in win-64, ignored in other platforms.
        WXWIDGETS_ROOT: ${{ github.workspace }}/wx # Only used in win-64, ignored in other platforms.
      with:
        source-dir: ${{ github.workspace }}
        build-dir: ${{ github.workspace }}/out/${{ matrix.target_os }}/${{ matrix.build_type }}
        args: --preset ${{ matrix.target_os }}-${{ matrix.build_type }}
        build-args: --preset ${{ matrix.target_os }}-${{ matrix.build_type }}

    - name: Test
      if: ${{ matrix.test }}
      uses: threeal/ctest-action@v1.0.0
      with:
        test-dir: out/${{ matrix.target_os }}/${{ matrix.build_type }}
        args: --preset ${{ matrix.target_os }}-${{ matrix.build_type }}
        build-config: ${{ matrix.build_type }}

    - name: Archive test results
      uses: actions/upload-artifact@v4
      if: ${{ matrix.test }}
      with:
        name: test-results-${{ matrix.target_os }}-${{ matrix.build_type }}
        path: |
            out/${{ matrix.target_os }}/${{ matrix.build_type }}/gtest/**/*.xml
            out/${{ matrix.target_os }}/${{ matrix.build_type }}/Testing/**/*.xml

    - name: Test Report
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: ${{ matrix.test && matrix.target_os != 'Win64' }}
      with:
        files: out/${{ matrix.target_os }}/${{ matrix.build_type }}/gtest/**/*.xml

