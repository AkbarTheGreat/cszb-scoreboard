/*
config.proto: Configuration proto for the cszb-scoreboard app

Copyright 2019-2024 Tracy Beck

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";
package cszb_scoreboard.proto;

message Rectangle {
  int32 x = 1;
  int32 y = 2;
  int32 width = 3;
  int32 height = 4;
}

message Color {
  int32 rgb = 1;
}

// ScreenSide represents which team(s) each monitor represents.  It's not a
// simple selection, and so must be contained as a mapping of possibilities.
message ScreenSide {
  bool error = 1;  // Used to indicate that we will have a box for an error, ie:
                   // there is no valid display to show to.
  bool control = 2;  // Indicates that it's our main display, used for control.
  bool home = 3;
  bool away = 4;
  bool extra = 5;
}

// A scaling font used in ScreenText presentations.
message Font {
  enum FontStyle {
    FONT_STYLE_UNDEFINED = 0;
    FONT_STYLE_IMPACT = 1;
    FONT_STYLE_MODERN = 2;
  }
  FontStyle style = 1;
  float size = 2;
  Color color = 3;
}

// Represents text which may be rendered on a ScreenText and all of the relevant
// pieces necessary.
message RenderableText {
  enum ScreenPosition {
    FONT_SCREEN_POSITION_CENTERED = 0;
    FONT_SCREEN_POSITION_TOP = 1;
    FONT_SCREEN_POSITION_BOTTOM = 2;
  }
  string text = 1;
  Font font = 2;
  ScreenPosition position = 3;
}

message DisplayInfo {
  int32 id = 1;
  Rectangle dimensions = 2;
  ScreenSide side = 3;
}

message DisplayConfig {
  repeated DisplayInfo displays = 1;
  bool enable_windowed_mode = 2;
  int32 window_count = 3;
  Rectangle window_size = 4;
}

message TeamInfo {
  enum TeamType {
    TEAM_ERROR = 0;
    HOME_TEAM = 1;
    AWAY_TEAM = 2;
    EXTRA_TEAM = 3;
  }
  TeamType team_type = 1;
  Color team_color = 2;
}

message TeamConfig {
  repeated TeamInfo teams = 1;
  repeated TeamInfo.TeamType single_screen_order = 2;
}

message GeneralConfig {
  double drop_shadow_depth = 1;
}

message ScoreboardConfig {
  DisplayConfig display_config = 1;
  TeamConfig team_config = 2;
  GeneralConfig general_config = 3;
}
